
" Set default directory tu use XDG paths to keep $HOME clean
set undodir=$XDG_DATA_HOME/vim/undo
set directory=$XDG_DATA_HOME/vim/swap
set backupdir=$XDG_DATA_HOME/vim/backup
set viewdir=$XDG_DATA_HOME/vim/view
set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after

" ####################
" # EDITOR BEHAVIOUR #
" ####################

" toggle absolut/hybrid line numbers between i and n modes
set number " show line numbers
set relativenumber

" tab indentation behaviour
set tabstop=4 " tabs show as space
set softtabstop=4 " add spaces instead of tab when editing
set shiftwidth=4
set expandtab " tab becomes spaces

" Filetype specific indenting behaviour
filetype on
filetype plugin on
filetype indent on " file type based indentation
autocmd FileType make set noexpandtab shiftwidth=4 softtabstop=0 " real tabs in makefile
" autocmd FileType html,xhtml,css,xml,xslt set shiftwidth=2 softtabstop=2 " fixed indentation for web
autocmd FileType vim,lua,nginx set shiftwidth=2 softtabstop=2 " two space indentation for some files
autocmd FileType css set omnifunc=csscomplete#CompleteCSS " auto-indent braces in CSS
" autocmd FileType xhtml,html set omnifunc=htmlcomplete#CompleteTags " add completion for xHTML

" performance
set lazyredraw " do not redraw screen during macros. makes vim slightly faster
set synmaxcol=128 " limiting syntax highlighting to 128 columns can make vim faster

set nocompatible
set backspace=indent,eol,start

" mouse
set mouse=a

" #############
" # GRAPHICAL #
" #############


" text/bg colors
set termguicolors
syntax on " enable syntax highlighting
set spell " enable spellcheck
colorscheme default
syntax sync minlines=500
" command menu/bar
set showcmd " show last command used in bottom bar
set showmode " show current mode on last line
set showmatch " show matching words during search
set wildmenu " visual autocomplete menu

" highlighting
set cursorline " highlight current line in file
hi clear CursorLine
set showmatch " highlight matching ({[]})
set incsearch " Show where the next pattern is as you type it:
set hlsearch " Highlight the last searched pattern:

" ##################
" # MISC SHORTCUTS #
" ##################

let mapleader=" "

" STATUS LINE
"

" Status line
	set laststatus=2
	set statusline=
	set statusline+=%2*
	set statusline+=%{StatuslineMode()}
	set statusline+=\ 
	set statusline+=%{SpellCheckStatus()}
	set statusline+=%1*
	set statusline+=\ 
	set statusline+=%3*
	set statusline+=<
	set statusline+=-
	set statusline+=\ 
	set statusline+=%f
	set statusline+=\ 
	set statusline+=-
	set statusline+=>
	set statusline+=\ 
	set statusline+=%4*
	set statusline+=%m
	set statusline+=%=
	set statusline+=%h
	set statusline+=%r
	set statusline+=%4*
	set statusline+=%c
	set statusline+=/
	set statusline+=%l
	set statusline+=/
	set statusline+=%L
	set statusline+=\ 
	set statusline+=%1*
	set statusline+=|
	set statusline+=%y
	set statusline+=\ 
	set statusline+=%4*
	set statusline+=%P
	set statusline+=\ 
	set statusline+=%3*
	set statusline+=t:
	set statusline+=%n
	set statusline+=\ 


" Colors
	hi User2 ctermbg=lightgreen ctermfg=black guibg=lightgreen guifg=black
	hi User1 ctermbg=brown ctermfg=white guibg=black guifg=white
	hi User3 ctermbg=brown  ctermfg=lightcyan guibg=black guifg=lightblue
	hi User4 ctermbg=brown ctermfg=green guibg=black guifg=lightgreen


" Mode
	function! StatuslineMode()
	  let l:mode=mode()
	  if l:mode==#"n"
	    return "NORMAL"
	  elseif l:mode==#"V"
	    return "VISUAL LINE"
	  elseif l:mode==?"v"
	    return "VISUAL"
	  elseif l:mode==#"i"
	    return "INSERT"
	  elseif l:mode ==# "\<C-V>"
		return "V-BLOCK"
	  elseif l:mode==#"R"
	    return "REPLACE"
	  elseif l:mode==?"s"
	    return "SELECT"
	  elseif l:mode==#"t"
	    return "TERMINAL"
	  elseif l:mode==#"c"
	    return "COMMAND"
	  elseif l:mode==#"!"
	    return "SHELL"
	  else
		  return "VIM"
	  endif
	endfunction
	

" Spell Check Status
	function! SpellCheckStatus()
		if &spell 
			return " [SPELL]"
		else
			return ''
		endif	
	endfunction

